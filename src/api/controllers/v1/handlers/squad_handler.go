// squad_handler.go - generated by api:generate squad

package handlers

import (
	"jk-api/api/controllers/v1/dto"
	"jk-api/api/controllers/v1/mapper"
	"jk-api/internal/database/models"
	"jk-api/pkg/services/v1"
)

type SquadHandler struct {
	Service services.SquadService
}

func NewSquadHandler(service services.SquadService) *SquadHandler {
	return &SquadHandler{Service: service}
}

func (h *SquadHandler) CreateSquadHandler(input *dto.CreateSquadDto) (*dto.SquadResponseDto, error) {
	db := h.Service.GetDB().Begin()
	defer func() {
		if r := recover(); r != nil {
			db.Rollback()
		}
	}()

	squadService := h.Service.WithTx(db)

	newData, err := mapper.CreateSquadDtoToModel(input)
	if err != nil {
		return nil, err
	}

	createdData, err := squadService.CreateSquad(newData)
	if err != nil {
		db.Rollback()
		return nil, err
	}

	if err := db.Commit().Error; err != nil {
		return nil, err
	}

	return mapper.SquadModelToResponseDto(createdData)
}

func (h *SquadHandler) UpdateSquadHandler(id int64, input *dto.UpdateSquadDto) (*models.Squad, error) {
	updateData := &models.Squad{}

	return h.Service.UpdateSquad(id, updateData)
}

func (h *SquadHandler) DeleteSquadHandler(id int64) error {
	return h.Service.DeleteSquad(id)
}

func (h *SquadHandler) GetSquadByIDHandler(id int64) (*models.Squad, error) {
	return h.Service.GetSquadByID(id)
}

func (h *SquadHandler) GetAllSquadsHandler() ([]models.Squad, error) {
	return h.Service.GetAllSquads()
}
