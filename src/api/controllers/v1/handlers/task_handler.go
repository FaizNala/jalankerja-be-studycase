// task_handler.go - generated by api:generate task


package handlers

import (
	"jk-api/api/controllers/v1/dto"
	"jk-api/api/controllers/v1/mapper"
	"jk-api/internal/database/models"
	"jk-api/pkg/services/v1"
)

type TaskHandler struct {
	Service services.TaskService
}

func NewTaskHandler(service services.TaskService) *TaskHandler {
	return &TaskHandler{Service: service}
}

func (h *TaskHandler) CreateTaskHandler(input *dto.CreateTaskDto) (*dto.TaskResponseDto, error) {
	db := h.Service.GetDB().Begin()
	defer func() {
		if r := recover(); r != nil {
			db.Rollback()
		}
	}()

	taskService := h.Service.WithTx(db)

	newData, err := mapper.CreateTaskDtoToModel(input)
	if err != nil {
		return nil, err
	}

	createdData, err := taskService.CreateTask(newData)
	if err != nil {
		db.Rollback()
		return nil, err
	}

	if err := db.Commit().Error; err != nil {
		return nil, err
	}

	return mapper.TaskModelToResponseDto(createdData)
}

func (h *TaskHandler) UpdateTaskHandler(id int64, input *dto.UpdateTaskDto) (*dto.TaskResponseDto, error) {
	updateData, err := mapper.UpdateTaskDtoToModel(input)
	if err != nil {
		return nil, err
	}

	updatedData, err := h.Service.UpdateTask(id, updateData)
	if err != nil {
		return nil, err
	}

	return mapper.TaskModelToResponseDto(updatedData)
}

func (h *TaskHandler) DeleteTaskHandler(id int64) error {
	return h.Service.DeleteTask(id)
}

func (h *TaskHandler) GetTaskByIDHandler(id int64) (*models.Task, error) {
	return h.Service.GetTaskByID(id)
}

func (h *TaskHandler) GetAllTasksHandler() ([]models.Task, error) {
	return h.Service.GetAllTasks()
}
