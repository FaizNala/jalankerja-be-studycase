// project_handler.go - generated by api:generate project


package handlers

import (
	"jk-api/api/controllers/v1/dto"
	"jk-api/api/controllers/v1/mapper"
	"jk-api/internal/database/models"
	"jk-api/pkg/services/v1"
)

type ProjectHandler struct {
	Service services.ProjectService
}

func NewProjectHandler(service services.ProjectService) *ProjectHandler {
	return &ProjectHandler{Service: service}
}

func (h *ProjectHandler) CreateProjectHandler(input *dto.CreateProjectDto) (*dto.ProjectResponseDto, error) {
	db := h.Service.GetDB().Begin()
	defer func() {
		if r := recover(); r != nil {
			db.Rollback()
		}
	}()

	projectService := h.Service.WithTx(db)

	newData, err := mapper.CreateProjectDtoToModel(input)
	if err != nil {
		return nil, err
	}

	createdData, err := projectService.CreateProject(newData)
	if err != nil {
		db.Rollback()
		return nil, err
	}

	if err := db.Commit().Error; err != nil {
		return nil, err
	}

	return mapper.ProjectModelToResponseDto(createdData)
}

func (h *ProjectHandler) UpdateProjectHandler(id int64, input *dto.UpdateProjectDto) (*dto.ProjectResponseDto, error) {
	updateData, err := mapper.UpdateProjectDtoToModel(input)
	if err != nil {
		return nil, err
	}

	updatedData, err := h.Service.UpdateProject(id, updateData)
	if err != nil {
		return nil, err
	}

	return mapper.ProjectModelToResponseDto(updatedData)
}

func (h *ProjectHandler) DeleteProjectHandler(id int64) error {
	return h.Service.DeleteProject(id)
}

func (h *ProjectHandler) GetProjectByIDHandler(id int64) (*models.Project, error) {
	return h.Service.GetProjectByID(id)
}

func (h *ProjectHandler) GetAllProjectsHandler() ([]models.Project, error) {
	return h.Service.GetAllProjects()
}
